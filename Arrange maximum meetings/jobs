Q. . There are N meetings in the form of (S[i], F[i]) where S[i] is the start time of meeting i and F[i] is the finish time of meeting i.The task is to find the maximum number of meetings that can be accommodated in the meeting room. You can accommodate a meeting if the start time of the meeting is strictly greater than the finish time of the previous meeting. Print all meeting numbers.

Note: If two meetings can be chosen for the same slot then choose meeting with smaller index in the given array.

testcase:
N = 6
S = {1,3,0,5,8,5}
F = {2,4,6,7,9,9} 
Output:
{1,2,4,5}


7
11 12 12 12 8 6 18
15 12 12 13 12 8 19
Your Code's output is: 
3 6 7
It's Correct output is: 
2 6 7


 vector<int> maxMeetings(int N,vector<int> &S,vector<int> &F){
        
       map<pair<int,int>,int> mp;                 // for storing meeting number
           vector<pair<int,int>> v;               // TO STORE ALL JOBS
           
       for(int i=0;i<N;i++)
       {
           v.push_back({S[i],F[i]});

           if(mp.find({S[i],F[i]})==mp.end())                   // why need of this if stmt----> READ NOTE
           mp[{S[i],F[i]}]=i+1;
       }


// TO GET MAXIMUM ANSWER---> WE HAVE TO SORT ALL JOBS ACCORDING TO FINISH TIME(IF IT FINISH EARLY, WE CAN PICK MANY OTHER THAN)


       sort(v.begin(), v.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
    return a.second < b.second;
});

//

    int lastpick = v[0].second;            // PICK FIRST JOB NOW AND TRAVERS THROUGH ALL V VECTOR
    vector<int> ans;
    ans.push_back(mp[{v[0].first, v[0].second}]);

    for (int i = 1; i < N; i++) {
        if (v[i].first > lastpick) {
            ans.push_back(mp[{v[i].first, v[i].second}]);
            lastpick = v[i].second;
        }
    }
    sort(ans.begin(),ans.end());
    return ans;
